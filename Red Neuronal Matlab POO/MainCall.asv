%% Testing with a sample nn
clc;
clear;
close all;
%Iris_Test;

%% Initialization of hyperparameters
% Data
pol_deg         = 1;
testratio       = 20;  %

% Network
lambda          = 0.0;

%Trainer
learningRate    = 0.1;
alpha           = 0.9;

%% Loading of files/datasets
datasets = load("datasets.mat").datasets;
disp('Datsets available:')
for i = 1:length(datasets)
    fprintf('%d - %s \n',i,datasets(i))
end
file = datasets(input('Choose: '));

%% Create the data object
%data1 = Data(file,testratio,pol_deg);
data1 = load('data1BATCHANALY.mat').data1;

%% Create Network Object
hiddenlayers = [500,300];
net_structure           = [data1.nFeatures,hiddenlayers,data1.nLabels];
n.lambda                = lambda;
n.Net_Structure         = net_structure;
n.data                  = data1;
n.prop                  = 'backprop';
n.costFunction          = '-loglikelihood-softmax';
n.activationFunction    = 'tanh';
network = Network(n);

%% Create a trainer object
t               = n;
t.network       = network;
t.lr            = learningRate;
t.alpha         = alpha;
t.type          = 'SGD';
t.batchsize     = 5;
t.optTolerance  = 1*10^-3;
t.maxevals      = 20000;
t.learningType  = 'static';
t.isDisplayed   = false;
t.nPlot         = 20;
optimizer       = Trainer.create(t);

%% Possible functions
% data.draw_corrmatrix();
% trainer.train();
% a.class = ''; a.type = ''; a.min = ; a.max = ;
% analyzeHyperparameter(a,network,data1,sgd_opt)
% nFigure = 100;
% network.plotBoundary(nFigure);
% network.plotConnections();
% network.plotConfusionMatrix();


%% Suggestions

% for i = 1:length(y)
%     for j = 1:size(y,2)
%         if y(i,j) ~= 0
%             y2(i) = j;
%         end
%     end
% end

% Kernel trick
% Analysis batch size ,lambda size
% Overfitting, data size
% AutoEncoder vs PCA


% fvGD   = [6.3*10^(-4)  5.51*10^(-3)  1.2*10^(-3) 1.3*10^(-3) 3.21*10^(-3) 1.26*10^(-2) 3.3*10^(-2) 3*10^(-1)];
% teGD   = [0.80 0.883 0.923 0.817 0.767 0.755 0.725 0.717 0.681];
% fvNest = [2.8*10^(-4) 3.2*10^(-4) 5.5*10^(-4) 8.4*10^(-4) 1.47*10^(-3) 8.16*10^(-3)];
% teNest = [0.921 0.889 0.862 0.854 0.835 0.835];
% y     = [1 5 10 50 100 200 500 1000 2000 4000 8000];
% figure(1)
% loglog(y,fvGD,'b-o',y(3:end),fvNest,'r-o')
% legend('SGD','Nesterov')
% xlabel('Batch Size')
% ylabel('Function value')
% figure(2)
% loglog(y,teGD,'b-o',y(3:end),teNest,'r-o')
% legend('SGD','Nesterov')
% xlabel('Batch Size')
% ylabel('Test accuracy [%]')

